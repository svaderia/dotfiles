"
" A (not so) minimal vimrc.
"

" You want Vim, not vi. When Vim finds a vimrc, 'nocompatible' is set anyway.
" We set it explicitely to make our position clear!
set nocompatible

filetype plugin indent on  " Load plugins according to detected filetype.
syntax on                  " Enable syntax highlighting.

" disbale polyglot on *sh files, since it causes insert slowness
let g:polyglot_disabled = ['sh', 'zsh']

" Set color theme to onedark
packadd! onedark.vim
let g:onedark_hide_endofbuffer=1
let g:onedark_terminal_italics=1
let g:airline_theme='onedark'
let g:airline_powerline_fonts=1
colorscheme onedark
if (has("termguicolors"))
    set termguicolors
endif

set autoindent              " Indent according to previous line.
set expandtab               " Use spaces instead of tabs.
set softtabstop =4          " Tab key indents by 4 spaces.
set shiftwidth  =4          " >> indents by 4 spaces.
set tabstop     =4
set shiftround              " >> indents to next multiple of 'shiftwidth'.
set mouse+=a                " Define what does this do?

set backspace   =indent,eol,start  " Make backspace work as you would expect.
set hidden                  " Switch between buffers without having to save first.
set laststatus  =2          " Always show statusline.
set display     =lastline   " Show as much as possible of the last line.

set showmode                " Show current mode in command-line.
set showcmd                 " Show already typed keys when more are expected.
set showmatch               " show matching bracket (briefly jump)

set title                   " Show file name in title bar
set smartindent             " smart auto indenting
set smarttab                " smart tab handling for indenting

set incsearch               " Highlight while searching with / or ?.
set hlsearch                " Keep matches highlighted.
set ignorecase              " Ignore case when searching
set smartcase               " Do not ignore case when all the letters are capital

set ttyfast                 " Faster redrawing.
set lazyredraw              " Only redraw when necessary.
set splitbelow              " Open new windows below the current window.
set splitright              " Open new windows right of the current window.
set cursorline              " Find the current line quickly.
set wrapscan                " Searches wrap around end-of-file.
set report      =0          " Always report changed lines.
set synmaxcol   =200        " Only highlight the first 200 columns.

set history     =8192       " Increase History
set list                    " Show non-printable characters.
set noerrorbells visualbell t_vb=    "Disable annoying error noises
set linebreak               " Have lines wrap instead of continue off-screen
set scrolloff   =10         " Keep cursor in approximately the middle of the screen

set nu rnu                  " Set line numbers
set updatetime  =100        " Set update time to 100ms

" Undo
set undofile " Maintain undo history between sessions
set undodir=~/.vim/undodir

" Search down into subfolders
" Provides tab-completion for all file-related tasks
set path+=**

" Display all matching files when we tab complete
set wildmenu

" Code Folding
set foldenable
set foldlevelstart=10       " Fold only long blocks of code.
set foldnestmax=10          " Folds can be nested, this ensures max 10 nested folds.
set foldmethod=syntax       " Folding based on indentation.
" Other acceptable values are marker, manual, expr, syntax, diff.

" Enable project specific vimrc file support
set exrc
set secure

" Turn off swap files and backups.
set noswapfile
set nobackup
set nowritebackup

" Turn the autowrite on so that whenever some build is calld, the data is
" written automatically
set autowrite

" change the word to upper char in insert mode
" Useful when you want type a big variable name in CAPS
inoremap <C-u> <Esc>viwUea

" mapping enter key to enter a line in normal mode
nnoremap <CR> mtO<ESC>0D`t

" Going to the end and the beginning of a line
map H ^
map L $

" turn off search highlight
vnoremap <C-n> :nohlsearch<CR>
nnoremap <C-n> :nohlsearch<CR>
nohlsearch

" quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" quicker window movement in terminal mode
tnoremap <C-j> <C-w>j
tnoremap <C-k> <C-w>k
tnoremap <C-h> <C-w>h
tnoremap <C-l> <C-w>l

" Search results centered please
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz
nnoremap <C-o> <C-o>zz
nnoremap <C-i> <C-i>zz

" map redo to U
nnoremap U <C-r>

" TODO: confirm this
" I don't remember what this is for. I think this is to highlight the tab
" characters differently than the spaces character
if has('multi_byte') && &encoding ==# 'utf-8'
  let &listchars = 'tab:▸ ,extends:❯,precedes:❮,nbsp:±'
else
  let &listchars = 'tab:> ,extends:>,precedes:<,nbsp:.'
endif

" This is mapped to echo to ensure I don't end up using this mappings
" I don't think I need this anymore, but good to have aorund
nnoremap <Left>  :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up>    :echoe "Use k"<CR>
nnoremap <Down>  :echoe "Use j"<CR>
" ...and in insert mode
inoremap <Left>  <ESC>:echoe "Use h"<CR>
inoremap <Right> <ESC>:echoe "Use l"<CR>
inoremap <Up>    <ESC>:echoe "Use k"<CR>
inoremap <Down>  <ESC>:echoe "Use j"<CR>

" map jk to Esc
inoremap jk <ESC>
vnoremap jk <ESC>

" FINDING FILES: " TODO : search what this is for
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" Leader
let mapleader=" "       " leader is space

" Copy the entire file in system clipboard
nnoremap <Leader>y :%y+<CR>

" Open terminal in vertical split inside vim
nnoremap <Leader>t :vertical terminal<CR>
nnoremap <Leader>T :terminal<CR>

" Open and source vimrc
nnoremap <Leader>ev :vsplit $MYVIMRC<CR>
nnoremap <Leader>sv :source $MYVIMRC<CR>
nnoremap <Leader>el :LocalVimRCEdit<CR>
nnoremap <Leader>sl :LocalVimRC<CR>

" Page up/down
nnoremap <Leader>j <C-d>
nnoremap <Leader>k <C-u>

" strips trailing whitespace at the end of files. this
" is called on buffer write in the autogroup below.
function! <SID>StripTrailingWhitespaces()
    " save last search & cursor position
    let _s=@/
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    %s/^\n\+/\r/e
    let @/=_s
    call cursor(l, c)
endfunction
"  w wq q   --  Quick Save
nmap <Leader>w :call <SID>StripTrailingWhitespaces()<CR>:w<CR>
nmap <Leader>q :q<CR>
nmap <Leader>wq :call <SID>StripTrailingWhitespaces()<CR>:wq<CR>

" Auto saving/loading folds on exit/enter
" Enable it after you know about functions and run this command only when file
" is writable
" au BufWinLeave * mkview
" au BufWinEnter * silent loadview

" fold/unfold
nnoremap <Leader><Leader> za

" TODO : Learn folding
" You can look following for the reference
" https://github.com/JJGO/dotfiles/blob/master/vim/.vimrc

" Plugins
" vim-commentary        : gc (go comment)

" vim-subversive        : TODO
" vim-yoink             : TODO
let g:yoinkIncludeDeleteOperations=1

" vim-replace-with-register : [count]["x]gr{motion}   Replace {motion} text with the contents of register x.
" vim-sort-motion       : gs{motion} (go sort}
" vim-system-copy       : cp{motion} cv{motion}
let g:system_copy_silent = 1

" TODO : explore NERDTREE and get better with multifile editing
" Close vim if only window left is NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" Open nerd tree at the current file or close nerd tree if pressed again.
nnoremap <silent> <expr> <Leader>b g:NERDTree.IsOpen() ? "\:NERDTreeClose<CR>" : bufexists(expand('%')) ? "\:NERDTreeFind<CR>" : "\:NERDTree<CR>"
" Open nerdtree when you just open the vim
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" vim-localvimrc
let g:localvimrc_sandbox=0
let g:localvimrc_ask=0

" Vim jump to the last position when reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif
endif

" TODO : vim-gitgutter
" ]c & [c  : Jumbe between hunks
" <Leader>hu : Undo Hunk
" <Leader>hs : Stage Hunk
" <Leader>hp : Preview Hunk
command! Gqf GitGutterQuickFix | copen
nnoremap <Leader>gf :Gqf<CR>
omap ih <Plug>(GitGutterTextObjectInnerPending)
omap ah <Plug>(GitGutterTextObjectOuterPending)
xmap ih <Plug>(GitGutterTextObjectInnerVisual)
xmap ah <Plug>(GitGutterTextObjectOuterVisual)

" map shift between buffers
" changed because it conflicted with my competitive <leader>p
" nnoremap <Leader>m :bnext<CR>
" nnoremap <Leader>, :bprevious<CR>
" nnoremap <Leader>d :bdelete<CR>

" Tagbar is very interesting, It uses ctags to show the tags on fly and let
" you move around.
" I need to remap their <Space> mapping to something else for my <leader> to
" work
let g:tagbar_map_showproto = ":"
nnoremap <Leader>u :TagbarToggle<CR>

" Syntax Highlighting for vim-go

let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1

" Mappings while in the go files, uses vim-go
" https://github.com/fatih/vim-go/wiki/Tutorial#hello-world
" autocmd FileType go nnoremap <Leader>r <Plug>(go-test)

" run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

autocmd FileType go nnoremap <leader>g :<C-u>call <SID>build_go_files()<CR>
autocmd FileType go nnoremap <leader>a :GoAlternate<CR>

" This navigates to next issues in the quickfix window
" would be useful for a lot of things
nnoremap <leader>n :cnext<CR>
nnoremap <leader>, :cprevious<CR>
nnoremap <leader>c :cclose<CR>

" They say change it to goimports
" They already have gofmt on save. Disable is like below
" let g:go_fmt_autosave = 0
let g:go_fmt_command = "golines"
let g:go_fmt_options = {
    \ 'golines': '-m 120',
    \ }

" vim-go also provides the `af` and `if` to affect the function
" I want something similar for every function out there. :)
" See Text Objects on the tutorial for more details

nnoremap gt <C-t>

" I installed ultisnips for quickly using it with go
" But I think I should explore it more
" https://github.com/SirVer/ultisnips
" This let's me use tab to Jump and Exapand the snippet.
" More details in docs
let g:UltiSnipsJumpOrExpandTrigger = "<tab>"

" Here are some interesting snippets for go i can use
" fn -> fmt.Println()
" ff -> fmt.Printf()
"

" Position the (global) quickfix window at the very bottom of the window
" (useful for making sure that it appears underneath splits)
" https://github.com/fatih/vim-go/issues/108#issuecomment-565131948
" NOTE: Using a check here to make sure that window-specific location-lists
" aren't effected, as they use the same `FileType` as quickfix-lists.
autocmd FileType qf if (getwininfo(win_getid())[0].loclist != 1) | wincmd J | endif


