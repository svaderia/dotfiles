"
" A (not so) minimal vimrc.
"

" You want Vim, not vi. When Vim finds a vimrc, 'nocompatible' is set anyway.
" We set it explicitely to make our position clear!
set nocompatible

filetype plugin indent on  " Load plugins according to detected filetype.
syntax on                  " Enable syntax highlighting.

" disbale polyglot on *sh and md files, since it causes insert slowness
let g:polyglot_disabled = ['sh', 'zsh', 'md', 'markdown', 'py', 'python', 'sensible']

" Set color theme to onedark
packadd! onedark.vim
let g:onedark_hide_endofbuffer=1
let g:onedark_terminal_italics=1
let g:airline_theme='onedark'
let g:airline_powerline_fonts=1
colorscheme onedark
if (has("termguicolors"))
    set termguicolors
endif

set autoread                " When the file is updated outside vim, reload it in vim

set autoindent              " Indent according to previous line.
set expandtab               " Use spaces instead of tabs. `:retab` will reformat the file
set softtabstop =4          " Tab key indents by 4 spaces.
set shiftwidth  =4          " >> indents by 4 spaces.
set tabstop     =4          " 1 tab == 4 spaces.
set shiftround              " >> indents to next multiple of 'shiftwidth'.
set mouse+=a                " Define what does this do?

set backspace   =indent,eol,start  " Make backspace work as you would expect.
set hidden                  " Switch between buffers without having to save first.
set laststatus  =2          " Always show statusline.
set display     =lastline   " Show as much as possible of the last line.

set showmode                " Show current mode in command-line.
set showcmd                 " Show already typed keys when more are expected.
set showmatch               " show matching bracket (briefly jump)

set title                   " Show file name in title bar
set smartindent             " smart auto indenting
set smarttab                " smart tab handling for indenting

set incsearch               " Highlight while searching with / or ?.
set nohlsearch              " Does not keep matches highlighted.
set ignorecase              " Ignore case when searching
set smartcase               " Do not ignore case when all the letters are capital

set ttyfast                 " Faster redrawing.
set lazyredraw              " Only redraw when necessary.
set splitbelow              " Open new windows below the current window.
set splitright              " Open new windows right of the current window.
set cursorline              " Find the current line quickly.
set wrapscan                " Searches wrap around end-of-file.
set report      =0          " Always report changed lines.
set synmaxcol   =200        " Only highlight the first 200 columns.

set history     =8192       " Increase History
set list                    " Show non-printable characters.
set noerrorbells visualbell t_vb=    "Disable annoying error noises
set linebreak               " Have lines wrap instead of continue off-screen
set scrolloff   =10         " Keep cursor in approximately the middle of the screen

set nu rnu                  " Set line numbers
set updatetime  =100        " Set update time to 100ms

"experimental : https://github.com/joe-skb7/cscope-maps/blob/master/plugin/cscope_maps.vim#L156
set timeoutlen=1000
set ttimeout
set ttimeoutlen=100

" Undo
set undofile " Maintain undo history between sessions
set undodir=~/.vim/undodir

" Search down into subfolders
" Provides tab-completion for all file-related tasks
set path+=**

" Display all matching files when we tab complete
set wildmenu

" Code Folding
set foldenable
set foldlevelstart=10       " Fold only long blocks of code.
set foldnestmax=10          " Folds can be nested, this ensures max 10 nested folds.
set foldmethod=syntax       " Folding based on indentation.
" Other acceptable values are marker, manual, expr, syntax, diff.

" Enable project specific vimrc file support
set exrc
set secure

" Turn off swap files and backups.
set noswapfile
set nobackup
set nowritebackup

" Turn the autowrite on so that whenever some build is called, the data is
" written automatically
set autowrite

" change the word to upper char in insert mode
" Useful when you want type a big variable name in CAPS
" inoremap <C-u> <Esc>viwUea

" mapping enter key to enter a line in normal mode
nnoremap <CR> mtO<ESC>0"_D`t

" Going to the end and the beginning of a line
map H ^
map L $

" turn off search highlight
vnoremap <C-n> :nohlsearch<CR>
nnoremap <C-n> :nohlsearch<CR>
nohlsearch

" quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" quicker window movement in terminal mode
tnoremap <C-j> <C-w>j
tnoremap <C-k> <C-w>k
tnoremap <C-h> <C-w>h
tnoremap <C-l> <C-w>l

" Search results centered please
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz
nnoremap <C-o> <C-o>zz
nnoremap <C-i> <C-i>zz

" map redo to U
nnoremap U <C-r>

" TODO: confirm this
" I don't remember what this is for. I think this is to highlight the tab
" characters differently than the spaces character
if has('multi_byte') && &encoding ==# 'utf-8'
  let &listchars = 'tab:▸ ,extends:❯,precedes:❮,nbsp:±'
else
  let &listchars = 'tab:> ,extends:>,precedes:<,nbsp:.'
endif

" map jk to Esc
inoremap jk <ESC>
vnoremap jk <ESC>

" FINDING FILES: " TODO : search what this is for
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" Leader
let mapleader=" "       " leader is space

" Copy the entire file in system clipboard
nnoremap <Leader>y :%y+<CR>

" Copy to clipboard mapping
vnoremap <Leader>y "*y

" Open terminal in vertical split inside vim
nnoremap <Leader>t :vertical terminal<CR>
nnoremap <Leader>T :terminal<CR>

" Open and source vimrc and .lvimrc
nnoremap <Leader>ev :vsplit $MYVIMRC<CR>
nnoremap <Leader>sv :source $MYVIMRC<CR>
nnoremap <Leader>el :LocalVimRCEdit<CR>
nnoremap <Leader>sl :LocalVimRC<CR>

" Page up/down
nnoremap <Leader>j <C-d>
nnoremap <Leader>k <C-u>

"  w wq q   --  Quick Save
nmap <Leader>w :w<CR>
nmap <Leader>q :q<CR>
nmap <Leader>wq :wq<CR>

" Auto saving/loading folds on exit/enter
" Enable it after you know about functions and run this command only when file
" is writable
" au BufWinLeave * mkview
" au BufWinEnter * silent loadview

" fold/unfold
nnoremap <Leader><Leader> za

" TODO : Learn folding
" You can look following for the reference
" https://github.com/JJGO/dotfiles/blob/master/vim/.vimrc

" Plugins
" vim-commentary        : gc (go comment)

" vim-subversive        : TODO

" vim-replace-with-register : [count]["x]gr{motion}   Replace {motion} text with the contents of register x.
" vim-sort-motion       : gs{motion} (go sort}
" vim-system-copy       : cp{motion} cv{motion}
let g:system_copy_silent = 1

" TODO : explore NERDTREE and get better with multifile editing
" Close vim if only window left is NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" Open nerd tree at the current file or close nerd tree if pressed again.
nnoremap <silent> <expr> <Leader>b g:NERDTree.IsOpen() ? "\:NERDTreeClose<CR>" : bufexists(expand('%')) ? "\:NERDTreeFind<CR>" : "\:NERDTree<CR>"
" Open nerdtree when you just open the vim
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
let g:NERDTreeIgnore = ['\.o$[[file]]', '\.class$[[file]]', '\.dep$[[file]]', '\.a$[[file]]']

" vim-localvimrc
let g:localvimrc_sandbox=0
let g:localvimrc_ask=0

" Vim jump to the last position when reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif
endif

" TODO : vim-gitgutter
" Rethink/research all the mapping
" ]c & [c  : Jumbe between hunks
" <Leader>hu : Undo Hunk
" <Leader>hs : Stage Hunk
" <Leader>hp : Preview Hunk
command! Gqf GitGutterQuickFix | copen
" nnoremap <Leader>gf :Gqf<CR>
omap ih <Plug>(GitGutterTextObjectInnerPending)
omap ah <Plug>(GitGutterTextObjectOuterPending)
xmap ih <Plug>(GitGutterTextObjectInnerVisual)
xmap ah <Plug>(GitGutterTextObjectOuterVisual)

" map shift between buffers
" changed because it conflicted with my competitive <leader>p
" nnoremap <Leader>m :bnext<CR>
" nnoremap <Leader>, :bprevious<CR>
" nnoremap <Leader>d :bdelete<CR>

" Tagbar is very interesting, It uses ctags to show the tags on fly and let
" you move around.
" I need to remap their <Space> mapping to something else for my <leader> to
" work
let g:tagbar_map_showproto = ":"
nnoremap <Leader>u :TagbarToggle<CR>

" Syntax Highlighting for vim-go

let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1

" Mappings while in the go files, uses vim-go
" https://github.com/fatih/vim-go/wiki/Tutorial#hello-world
" autocmd FileType go nnoremap <Leader>r <Plug>(go-test)

" run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

autocmd FileType go nnoremap <leader>g :<C-u>call <SID>build_go_files()<CR>
autocmd FileType go nnoremap <leader>a :GoAlternate<CR>

" This navigates to next issues in the quickfix window
" would be useful for a lot of things
nnoremap <leader>n :cnext<CR>
nnoremap <leader>, :cprevious<CR>
nnoremap <leader>c :cclose<CR>

" They say change it to goimports
" They already have gofmt on save. Disable is like below
" let g:go_fmt_autosave = 0
let g:go_fmt_command = "golines"
let g:go_fmt_options = {
    \ 'golines': '-m 120',
    \ }

" vim-go also provides the `af` and `if` to affect the function
" I want something similar for every function out there. :)
" I found it with vim-textobj-function

nnoremap gt <C-t>

" https://github.com/SirVer/ultisnips
" This let's me use tab to Jump and Exapand the snippet.
let g:UltiSnipsJumpOrExpandTrigger = "<tab>"
let g:UltiSnipsEditSplit="vertical"

" Here are some interesting snippets for go i can use
" fn -> fmt.Println()
" ff -> fmt.Printf()

" CSCOPE 
"if has("cscope")

"    """"""""""""" Standard cscope/vim boilerplate

"    " use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
"    set cscopetag

"    " check cscope for definition of a symbol before checking ctags: set to 1
"    " if you want the reverse search order.
"    set csto=0

"    " hide msg when adding cscope database at start
"    set nocscopeverbose

"    " Find and add a cscope file. Either from CSCOPE_DB or by searching for it
"    " recursively starting in the CWD and going up to /
"    if $CSCOPE_DB != ""
"        cs add $CSCOPE_DB
"    else
"        " Get all parts of our current path
"        let dirs = split($PWD, '/')
"        " Start building a list of paths in which to look for cscope.out
"        let paths = ['/']
"        " /foo/bar/baz would result in the `paths` array containing:
"        " [/ /foo /foo/bar /foo/bar/baz]
"        for d in dirs
"            let paths = add(paths, paths[len(paths) - 1] . d . '/')
"        endfor

"        " List is backwards search order, so reverse it.
"        for d in reverse(paths)
"            let cscope_file = d . "/cscope.out"
"            if filereadable(cscope_file)
"                execute('cs add ' . cscope_file)
"                break
"            endif
"        endfor
"    endif

"    " show msg when any other cscope db added
"    set cscopeverbose


"    """"""""""""" My cscope/vim key mappings
"    "
"    " The following maps all invoke one of the following cscope search types:
"    "
"    "   's'   symbol: find all references to the token under cursor
"    "   'g'   global: find global definition(s) of the token under cursor
"    "   'd'   called: find functions that function under cursor calls
"    "   'a'   assignments: find places where this symbol is assigned a value
"    "   'c'   calls:  find all calls to the function name under cursor

"    "   't'   text:   find all instances of the text under cursor
"    "   'e'   egrep:  egrep search for the word under cursor
"    "   'f'   file:   open the filename under cursor
"    "   'i'   includes: find files that include the filename under cursor
"    "   'S'   struct: find struct definition under cursor

"    nmap <leader>\s :cs find s <C-R>=expand("<cword>")<CR><CR>
"    nmap <leader>\g :cs find g <C-R>=expand("<cword>")<CR><CR>
"    nmap <leader>\d :cs find d <C-R>=expand("<cword>")<CR><CR>
"    nmap <leader>\a :cs find a <C-R>=expand("<cword>")<CR><CR>
"    nmap <leader>\c :cs find c <C-R>=expand("<cword>")<CR><CR>

"    " nmap <leader>\t :cs find t <C-R>=expand("<cword>")<CR><CR>
"    nmap <leader>\e :cs find e <C-R>=expand("<cword>")<CR><CR>
"    " nmap <leader>\f :cs find f <C-R>=expand("<cfile>")<CR><CR>
"    nmap <leader>\i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
"    nmap <leader>\S :cs find t struct <C-R>=expand("<cword>")<CR> {<CR>

"endif

"" reset the cscope connection
"function UpdateCscope()
"	!cscope -qRb
"	cs reset
"endfunction
"command CUP call UpdateCscope()

"" Here goes the make and format
" nnoremap <leader>g :Make<CR>
" nnoremap <leader>f :Make format<CR>

" Here should be something that folds all the comments :)

" Here should be something to go to the header file
if !exists('*SwitchCHeader')
    function! SwitchCHeader()
        " Your function's code goes here
        if (expand("%:e") == "c")
            execute "cscope find f " . expand("%:t:r") . ".h"
        elseif (expand("%:e") == "h")
            execute "cscope find f " . expand("%:t:r") . ".c"
        endif
    endfunction
endif

" see below
" nnoremap <leader>a :call SwitchCHeader()<CR>

" Maps Escape button in terminal window
" This is so coool, but Option + <Any key> ends up sending <Esc> to terminal
" which is not cool :(, I use Opt+backspace and Opt+arrows heavily
" autocmd TerminalWinOpen * if &buftype ==# 'terminal' | tnoremap <buffer> <Esc> <C-\><C-n> | endif

"Did you know `gx` opens the link under cursor to the browser?

" Load fzf : If installed using Homebrew
set rtp+=/usr/local/opt/fzf
set rtp+=~/.fzf " This is for the andrew machine where I installed it manually

" These are fzf mappings
nnoremap <leader>\f :Files<cr>
nnoremap <leader>\b :Buffers<cr>
" nnoremap <leader>\t :Tags<cr>
nnoremap <leader>\r :Rg<cr>
nnoremap <leader>\m :Marks<cr>
" nnoremap <leader>\y :FYanks<cr>
nnoremap <leader>\y :Apropos<cr>

" vim-yoink             :Yanks
" let g:yoinkIncludeDeleteOperations=1
" let g:yoinkSyncNumberedRegisters=1 

"fzf mapping for Yanks
" function! s:yank_list()
"   redir => ys
"   silent Yanks
"   redir END
"   return split(ys, '\n')[1:]
" endfunction

" function! s:yank_handler(reg)
"   if empty(a:reg)
"     echo ;"aborted register paste"
"   else
"     let token = split(a:reg, ' ')
"     execute 'normal! "' . token[0] . 'P'
"   endif
" endfunction

" function! s:yanks(...) abort
"     let l:opts = {
"                 \ 'source': s:yank_list(),
"                 \ 'sink': function('s:yank_handler'),
"                 \ }
"     call fzf#run(fzf#wrap(l:opts))
" endfunction

" command! FYanks call s:yanks()

" change the default action on enter to open in split
let g:fzf_action = {
      \ 'enter': 'vsplit',
      \ 'ctrl-t': 'tab split',
      \ 'ctrl-s': 'split',
      \ 'ctrl-v': 'vsplit'
  \ }

" set the filetype when opening .S files
autocmd BufNewFile,BufRead *.S set filetype=ia64

" Indentation for new lists. We don't insert bullets as it doesn't play
" nicely with `gq` formatting. It relies on a hack of treating bullets
" as comment characters.
" See https://github.com/plasticboy/vim-markdown/issues/232
let g:vim_markdown_new_list_item_indent = 0
let g:vim_markdown_auto_insert_bullets = 0

let g:vim_markdown_frontmatter = 1
let g:vim_markdown_conceal_code_blocks = 0

" experiment 
" Experimenting with this feature. might keep it around
set colorcolumn=100
set textwidth=80

" man-page
runtime! ftplugin/man.vim
" this changes how `K` behaves, opens the man page inside verticle vim buffer
command! -nargs=1 Vman vert Man <args>
set keywordprg=:Vman

" Credit : https://www.reddit.com/r/vim/comments/mg8ov7/fuzzily_searching_man_pages_using_fzfvim/
command! -nargs=? Apropos call fzf#run(fzf#wrap({'source': 'man -k -s 2,3 '.shellescape(<q-args>).' | cut -d " " -f 1', 'sink': 'vert Man', 'options': ['--preview', 'MANPAGER=bat MANWIDTH='.(&columns/2-4).' man {}']}))

augroup ManPageMappings
    autocmd!
    autocmd FileType man nnoremap <buffer> h <C-d>
    autocmd FileType man nnoremap <buffer> u <C-u>
augroup END

" remove weird lines on SSH, could be due to airline
set t_RV=

" Terminal scrollback should be long
set termwinscroll=100000

" Add Language servers with lsp, let's see how this goes.

packadd lsp

" Clangd language server
call LspAddServer([#{
	\    name: 'clangd',
	\    filetype: ['c', 'cpp'],
	\    path: '/usr/bin/clangd',
	\    args: ['--background-index']
	\  }])

" Go language server
call LspAddServer([#{
	\    name: 'golang',
	\    filetype: ['go', 'gomod'],
	\    path: '/Users/svaderia/go/bin/gopls',
	\    args: ['serve'],
	\    syncInit: v:true
	\  }])

" Rust language server
call LspAddServer([#{
	\    name: 'rustlang',
	\    filetype: ['rust'],
	\    path: '/usr/local/bin/rust-analyzer',
	\    args: [],
	\    syncInit: v:true
	\  }])

call LspOptionsSet({'autoComplete': v:false})
call LspOptionsSet({'highligtDiagInline': v:false})
call LspOptionsSet({'autoHighlightDiags': v:false})

" We replace cscope maps with relavent maps in LSP and FZF
"
"   's'   symbol: Display the list of references to the keyword under cursor 
"                   in a new location list.
"   'g'   global: Go to the definition of the keyword under cursor.
"   'd'   called: find functions that function under cursor calls
"   'c'   calls:  Display the list of symbols calling the current symbol.

nmap <leader>\s :LspShowReferences<CR>
nmap <leader>\g :LspGotoDefinition<CR>
nmap <leader>\d :LspOutgoingCalls<CR>
nmap <leader>\c :LspIncomingCalls<CR>
nmap <leader>\e :Rg <C-R><C-W><CR>

nnoremap <leader>a :LspSwitchSourceHeader<CR>

" Hmm, it looks like the OutgoingCalls and IncomingCalls cannot be opened as 
" tags files and used to jump with just numbers.
" Explore following for generating ctags files for rust projects:
" https://github.com/dan-t/rusty-tags
" https://github.com/yancyribbens/run-ctags
" https://www.tonylykke.com/posts/2019/08/10/configure-vim-gutentags-to-use-rusty-tags/
"
" Following is pretty nice, it automatically keeps the tags upto date with file
" changes.
" https://github.com/ludovicchabant/vim-gutentags
"
setlocal tagfunc=lsp#lsp#TagFunc

" Since the call hierarchy windows are pretty large, let's try to do below:
autocmd BufWinEnter LSP-CallHierarchy resize 10

nnoremap <Leader>g :w<CR>:Make<CR>
